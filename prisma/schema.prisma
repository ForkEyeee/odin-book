generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  googleId         String          @unique
  name             String
  email            String          @unique
  hashedPassword   String
  profileId        Int?            @unique
  profile          Profile?        @relation(fields: [profileId], references: [id])
  profilePicture   String?
  posts            Post[]
  friendsAsUser1   Friend[]        @relation("UserToFriend1")
  friendsAsUser2   Friend[]        @relation("UserToFriend2")
  comments         Comment[]
  postLikes        PostLike[]
  commentLikes     CommentLike[]
  sentMessages     Message[]       @relation("UserSentMessages")
  receivedMessages Message[]       @relation("UserReceivedMessages")
}

model Profile {
  id          Int       @id @default(autoincrement())
  bio         String?
  dateOfBirth DateTime?
  gender      String?
  userId      Int?      @unique
  user        User?
}

model Friend {
  id      Int              @id @default(autoincrement())
  user1   User             @relation("UserToFriend1", fields: [user1Id], references: [id])
  user1Id Int
  user2   User             @relation("UserToFriend2", fields: [user2Id], references: [id])
  user2Id Int
  status  FriendshipStatus
  @@unique([user1Id, user2Id])
}

model Post {
  id           Int           @id @default(autoincrement())
  content      String
  imageUrl     String?
  blurURL      String?        
  author       User          @relation(fields: [authorId], references: [id])
  authorId     Int
  comments     Comment[]
  likes        PostLike[]
  commentLikes CommentLike[]
  createdAt    DateTime      @default(now())
}

model Comment {
  id           Int           @id @default(autoincrement())
  content      String
  author       User          @relation(fields: [authorId], references: [id])
  authorId     Int
  post         Post          @relation(fields: [postId], references: [id])
  postId       Int
  createdAt    DateTime      @default(now())
  commentLikes CommentLike[]
}

model PostLike {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  createdAt DateTime @default(now())
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  sender    User     @relation("UserSentMessages", fields: [senderId], references: [id])
  receiverId Int
  receiver  User     @relation("UserReceivedMessages", fields: [receiverId], references: [id])
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}
